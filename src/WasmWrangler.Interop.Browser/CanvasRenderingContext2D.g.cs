// <auto-generated />
#nullable enable
using WebAssembly;

namespace WasmWrangler.Interop.Browser
{
	public partial class CanvasRenderingContext2D : RenderingContext
	{
		internal static void Initialize() { JSObjectWrapperFactory.RegisterFactory(typeof(CanvasRenderingContext2D), x => new CanvasRenderingContext2D(x)); }

		protected readonly JSObject _js;

		internal CanvasRenderingContext2D(object obj)
		{
			if (!(obj is JSObject))
				throw new WasmWranglerException($"Expected {nameof(obj)} to be an instance of JSObject.");

			_js = (JSObject)obj;
		}

		public string fillStyle
		{
			get => _js.GetObjectProperty<string>(nameof(fillStyle));
			set => _js.SetObjectProperty(nameof(fillStyle), value);
		}

		public string strokeStyle
		{
			get => _js.GetObjectProperty<string>(nameof(strokeStyle));
			set => _js.SetObjectProperty(nameof(strokeStyle), value);
		}

		public void beginPath()
		{
			_js.Invoke(nameof(beginPath));
		}

		public void clip(string? fillRule)
		{
			_js.Invoke(nameof(clip), fillRule);
		}

		public void clearRect(int x, int y, int w, int h)
		{
			_js.Invoke(nameof(clearRect), x, y, w, h);
		}

		public void fillRect(int x, int y, int w, int h)
		{
			_js.Invoke(nameof(fillRect), x, y, w, h);
		}

		public void lineTo(int x, int y)
		{
			_js.Invoke(nameof(lineTo), x, y);
		}

		public void lineTo(float x, float y)
		{
			_js.Invoke(nameof(lineTo), x, y);
		}

		public void moveTo(int x, int y)
		{
			_js.Invoke(nameof(moveTo), x, y);
		}

		public void moveTo(float x, float y)
		{
			_js.Invoke(nameof(moveTo), x, y);
		}

		public void stroke()
		{
			_js.Invoke(nameof(stroke));
		}

		public void strokeRect(int x, int y, int w, int h)
		{
			_js.Invoke(nameof(strokeRect), x, y, w, h);
		}

	}

}
