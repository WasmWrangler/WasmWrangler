using WebAssembly;

namespace WasmWrangler.Interop.Browser
{
    interface CSSStyleDeclaration : Wrapper {
        string? alignContent { get; set; }
        string? alignItems { get; set; }
        string? alignSelf { get; set; }
        string? alignmentBaseline { get; set; }
        string? all { get; set; }
        string? animation { get; set; }
        string? animationDelay { get; set; }
        string? animationDirection { get; set; }
        string? animationDuration { get; set; }
        string? animationFillMode { get; set; }
        string? animationIterationCount { get; set; }
        string? animationName { get; set; }
        string? animationPlayState { get; set; }
        string? animationTimingFunction { get; set; }
        string? backfaceVisibility { get; set; }
        string? background { get; set; }
        string? backgroundAttachment { get; set; }
        string? backgroundClip { get; set; }
        string? backgroundColor { get; set; }
        string? backgroundImage { get; set; }
        string? backgroundOrigin { get; set; }
        string? backgroundPosition { get; set; }
        string? backgroundPositionX { get; set; }
        string? backgroundPositionY { get; set; }
        string? backgroundRepeat { get; set; }
        string? backgroundSize { get; set; }
        string? baselineShift { get; set; }
        string? blockSize { get; set; }
        string? border { get; set; }
        string? borderBlockEnd { get; set; }
        string? borderBlockEndColor { get; set; }
        string? borderBlockEndStyle { get; set; }
        string? borderBlockEndWidth { get; set; }
        string? borderBlockStart { get; set; }
        string? borderBlockStartColor { get; set; }
        string? borderBlockStartStyle { get; set; }
        string? borderBlockStartWidth { get; set; }
        string? borderBottom { get; set; }
        string? borderBottomColor { get; set; }
        string? borderBottomLeftRadius { get; set; }
        string? borderBottomRightRadius { get; set; }
        string? borderBottomStyle { get; set; }
        string? borderBottomWidth { get; set; }
        string? borderCollapse { get; set; }
        string? borderColor { get; set; }
        string? borderImage { get; set; }
        string? borderImageOutset { get; set; }
        string? borderImageRepeat { get; set; }
        string? borderImageSlice { get; set; }
        string? borderImageSource { get; set; }
        string? borderImageWidth { get; set; }
        string? borderInlineEnd { get; set; }
        string? borderInlineEndColor { get; set; }
        string? borderInlineEndStyle { get; set; }
        string? borderInlineEndWidth { get; set; }
        string? borderInlineStart { get; set; }
        string? borderInlineStartColor { get; set; }
        string? borderInlineStartStyle { get; set; }
        string? borderInlineStartWidth { get; set; }
        string? borderLeft { get; set; }
        string? borderLeftColor { get; set; }
        string? borderLeftStyle { get; set; }
        string? borderLeftWidth { get; set; }
        string? borderRadius { get; set; }
        string? borderRight { get; set; }
        string? borderRightColor { get; set; }
        string? borderRightStyle { get; set; }
        string? borderRightWidth { get; set; }
        string? borderSpacing { get; set; }
        string? borderStyle { get; set; }
        string? borderTop { get; set; }
        string? borderTopColor { get; set; }
        string? borderTopLeftRadius { get; set; }
        string? borderTopRightRadius { get; set; }
        string? borderTopStyle { get; set; }
        string? borderTopWidth { get; set; }
        string? borderWidth { get; set; }
        string? bottom { get; set; }
        string? boxShadow { get; set; }
        string? boxSizing { get; set; }
        string? breakAfter { get; set; }
        string? breakBefore { get; set; }
        string? breakInside { get; set; }
        string? captionSide { get; set; }
        string? caretColor { get; set; }
        string? clear { get; set; }
        string? clip { get; set; }
        string? clipPath { get; set; }
        string? clipRule { get; set; }
        string? color { get; set; }
        string? colorInterpolation { get; set; }
        string? colorInterpolationFilters { get; set; }
        string? columnCount { get; set; }
        string? columnFill { get; set; }
        string? columnGap { get; set; }
        string? columnRule { get; set; }
        string? columnRuleColor { get; set; }
        string? columnRuleStyle { get; set; }
        string? columnRuleWidth { get; set; }
        string? columnSpan { get; set; }
        string? columnWidth { get; set; }
        string? columns { get; set; }
        string? content { get; set; }
        string? counterIncrement { get; set; }
        string? counterReset { get; set; }
        string? cssFloat { get; set; }
        string? cssText { get; set; }
        string? cursor { get; set; }
        string? direction { get; set; }
        string? display { get; set; }
        string? dominantBaseline { get; set; }
        string? emptyCells { get; set; }
        string? fill { get; set; }
        string? fillOpacity { get; set; }
        string? fillRule { get; set; }
        string? filter { get; set; }
        string? flex { get; set; }
        string? flexBasis { get; set; }
        string? flexDirection { get; set; }
        string? flexFlow { get; set; }
        string? flexGrow { get; set; }
        string? flexShrink { get; set; }
        string? flexWrap { get; set; }
        string? @float { get; set; }
        string? floodColor { get; set; }
        string? floodOpacity { get; set; }
        string? font { get; set; }
        string? fontFamily { get; set; }
        string? fontFeatureSettings { get; set; }
        string? fontKerning { get; set; }
        string? fontSize { get; set; }
        string? fontSizeAdjust { get; set; }
        string? fontStretch { get; set; }
        string? fontStyle { get; set; }
        string? fontSynthesis { get; set; }
        string? fontVariant { get; set; }
        string? fontVariantCaps { get; set; }
        string? fontVariantEastAsian { get; set; }
        string? fontVariantLigatures { get; set; }
        string? fontVariantNumeric { get; set; }
        string? fontVariantPosition { get; set; }
        string? fontWeight { get; set; }
        string? gap { get; set; }
        string? glyphOrientationVertical { get; set; }
        string? grid { get; set; }
        string? gridArea { get; set; }
        string? gridAutoColumns { get; set; }
        string? gridAutoFlow { get; set; }
        string? gridAutoRows { get; set; }
        string? gridColumn { get; set; }
        string? gridColumnEnd { get; set; }
        string? gridColumnGap { get; set; }
        string? gridColumnStart { get; set; }
        string? gridGap { get; set; }
        string? gridRow { get; set; }
        string? gridRowEnd { get; set; }
        string? gridRowGap { get; set; }
        string? gridRowStart { get; set; }
        string? gridTemplate { get; set; }
        string? gridTemplateAreas { get; set; }
        string? gridTemplateColumns { get; set; }
        string? gridTemplateRows { get; set; }
        string? height { get; set; }
        string? hyphens { get; set; }
        string? imageOrientation { get; set; }
        string? imageRendering { get; set; }
        string? inlineSize { get; set; }
        string? justifyContent { get; set; }
        string? justifyItems { get; set; }
        string? justifySelf { get; set; }
        string? left { get; set; }
        string? letterSpacing { get; set; }
        string? lightingColor { get; set; }
        string? lineBreak { get; set; }
        string? lineHeight { get; set; }
        string? listStyle { get; set; }
        string? listStyleImage { get; set; }
        string? listStylePosition { get; set; }
        string? listStyleType { get; set; }
        string? margin { get; set; }
        string? marginBlockEnd { get; set; }
        string? marginBlockStart { get; set; }
        string? marginBottom { get; set; }
        string? marginInlineEnd { get; set; }
        string? marginInlineStart { get; set; }
        string? marginLeft { get; set; }
        string? marginRight { get; set; }
        string? marginTop { get; set; }
        string? marker { get; set; }
        string? markerEnd { get; set; }
        string? markerMid { get; set; }
        string? markerStart { get; set; }
        string? mask { get; set; }
        string? maskComposite { get; set; }
        string? maskImage { get; set; }
        string? maskPosition { get; set; }
        string? maskRepeat { get; set; }
        string? maskSize { get; set; }
        string? maskType { get; set; }
        string? maxBlockSize { get; set; }
        string? maxHeight { get; set; }
        string? maxInlineSize { get; set; }
        string? maxWidth { get; set; }
        string? minBlockSize { get; set; }
        string? minHeight { get; set; }
        string? minInlineSize { get; set; }
        string? minWidth { get; set; }
        string? objectFit { get; set; }
        string? objectPosition { get; set; }
        string? opacity { get; set; }
        string? order { get; set; }
        string? orphans { get; set; }
        string? outline { get; set; }
        string? outlineColor { get; set; }
        string? outlineOffset { get; set; }
        string? outlineStyle { get; set; }
        string? outlineWidth { get; set; }
        string? overflow { get; set; }
        string? overflowAnchor { get; set; }
        string? overflowWrap { get; set; }
        string? overflowX { get; set; }
        string? overflowY { get; set; }
        string? overscrollBehavior { get; set; }
        string? overscrollBehaviorBlock { get; set; }
        string? overscrollBehaviorInline { get; set; }
        string? overscrollBehaviorX { get; set; }
        string? overscrollBehaviorY { get; set; }
        string? padding { get; set; }
        string? paddingBlockEnd { get; set; }
        string? paddingBlockStart { get; set; }
        string? paddingBottom { get; set; }
        string? paddingInlineEnd { get; set; }
        string? paddingInlineStart { get; set; }
        string? paddingLeft { get; set; }
        string? paddingRight { get; set; }
        string? paddingTop { get; set; }
        string? pageBreakAfter { get; set; }
        string? pageBreakBefore { get; set; }
        string? pageBreakInside { get; set; }
        string? paintOrder { get; set; }
        string? perspective { get; set; }
        string? perspectiveOrigin { get; set; }
        string? placeContent { get; set; }
        string? placeItems { get; set; }
        string? placeSelf { get; set; }
        string? pointerEvents { get; set; }
        string? position { get; set; }
        string? quotes { get; set; }
        string? resize { get; set; }
        string? right { get; set; }
        string? rotate { get; set; }
        string? rowGap { get; set; }
        string? rubyAlign { get; set; }
        string? rubyPosition { get; set; }
        string? scale { get; set; }
        string? scrollBehavior { get; set; }
        string? shapeRendering { get; set; }
        string? stopColor { get; set; }
        string? stopOpacity { get; set; }
        string? stroke { get; set; }
        string? strokeDasharray { get; set; }
        string? strokeDashoffset { get; set; }
        string? strokeLinecap { get; set; }
        string? strokeLinejoin { get; set; }
        string? strokeMiterlimit { get; set; }
        string? strokeOpacity { get; set; }
        string? strokeWidth { get; set; }
        string? tabSize { get; set; }
        string? tableLayout { get; set; }
        string? textAlign { get; set; }
        string? textAlignLast { get; set; }
        string? textAnchor { get; set; }
        string? textCombineUpright { get; set; }
        string? textDecoration { get; set; }
        string? textDecorationColor { get; set; }
        string? textDecorationLine { get; set; }
        string? textDecorationStyle { get; set; }
        string? textEmphasis { get; set; }
        string? textEmphasisColor { get; set; }
        string? textEmphasisPosition { get; set; }
        string? textEmphasisStyle { get; set; }
        string? textIndent { get; set; }
        string? textJustify { get; set; }
        string? textOrientation { get; set; }
        string? textOverflow { get; set; }
        string? textRendering { get; set; }
        string? textShadow { get; set; }
        string? textTransform { get; set; }
        string? textUnderlinePosition { get; set; }
        string? top { get; set; }
        string? touchAction { get; set; }
        string? transform { get; set; }
        string? transformBox { get; set; }
        string? transformOrigin { get; set; }
        string? transformStyle { get; set; }
        string? transition { get; set; }
        string? transitionDelay { get; set; }
        string? transitionDuration { get; set; }
        string? transitionProperty { get; set; }
        string? transitionTimingFunction { get; set; }
        string? translate { get; set; }
        string? unicodeBidi { get; set; }
        string? userSelect { get; set; }
        string? verticalAlign { get; set; }
        string? visibility { get; set; }
        string? whiteSpace { get; set; }
        string? widows { get; set; }
        string? width { get; set; }
        string? willChange { get; set; }
        string? wordBreak { get; set; }
        string? wordSpacing { get; set; }
        string? wordWrap { get; set; }
        string? writingMode { get; set; }
        string? zIndex { get; set; }
    }

    interface HTMLElement : Wrapper {
        string innerText { get; set; }

        [Wrap(JSObject)]
        CSSStyleDeclaration style { get; }
    }

    interface HTMLCanvas : Wrapper<HTMLElement> {
        
    }

    interface console : Global {
        JSObject memory { get; }
        
        void assert(bool? condition, params object[] data);
        
        void clear();
        
        void count(string? label = null);
        
        void countReset(string? label = null);
        
        void debug(params object[] data);
        
        void dir(object? item = null, object? options = null);

        void dirxml(params object[] data);

        void error(params object[] data);

        void exception(string? message = null, params object[] optionalParams);

        void group(params object[] data);

        void groupCollapsed(params object[] data);

        void groupEnd();

        void info(params object[] data);

        void log(params object[] data);
        
        void table(object? tabularData = null, string[]? properties = null);
              
        void time(string? label = null);
        
        void timeEnd(string? label = null);
        
        void timeLog(string? label = null, params object[] data);
        
        void timeStamp(string? label = null);
        
        void trace(params object[] data);
        
        void warn(params object[] data);
    }

    interface document : Global {
        HTMLElement? getElementById(string element);

        T? getElementById<T>(string element) where T: HTMLElement;
    }
}
