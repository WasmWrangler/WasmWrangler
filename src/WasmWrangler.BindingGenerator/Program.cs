using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace WasmWrangler.BindingGenerator
{
    public static class Program
    {
        public static int Main(string[] args)
        {
            if (args.Length < 1)
            {
                Console.Error.WriteLine("ERROR: Please provide at least one file WasmWrangler bindings file.");
                return 1;
            }

            foreach (var inputFile in args)
            {
                var outputFile = Path.Combine(Path.GetDirectoryName(inputFile)!, Path.GetFileNameWithoutExtension(inputFile) + ".g.cs");

                Console.WriteLine($"{inputFile} => {outputFile}");

                var syntaxTree = CSharpSyntaxTree.ParseText(File.ReadAllText(inputFile));

                var output = new OutputBuffer();

                output.AppendLine("// <auto-generated />");
                output.AppendLine("#nullable enable");

                GenerateSyntaxNodes(output, syntaxTree.GetRoot().ChildNodes());

                //output.AppendLine("namespace WasmWrangler");
                //output.AppendLine("{");
                //output.IncreaseIndent();

                //switch (binding.Type)
                //{
                //    case "GlobalObject":
                //        GenerateGlobalObject(output, binding);
                //        break;

                //    case "JSObjectWrapper":
                //        GenerateJSObjectWrapper(output, binding);
                //        break;
                //}

                //output.DecreaseIndent();
                //output.AppendLine("}");

                File.WriteAllText(outputFile, output.ToString());
            }

            return 0;
        }

        private static string CreateErrorMessage(SyntaxNode node, string message)
        {
            FileLinePositionSpan span = node.SyntaxTree.GetLineSpan(node.Span);
            int lineNumber = span.StartLinePosition.Line;
            int characterNumber = span.StartLinePosition.Character;

            return $"({lineNumber}, {characterNumber}): {message}";
        }

        private static void GenerateSyntaxNodes(OutputBuffer output, IEnumerable<SyntaxNode> nodes)
        {
            foreach (var node in nodes)
            {
                switch (node)
                {
                    case NamespaceDeclarationSyntax namespaceDeclarationSyntax:
                        output.AppendLine($"namespace {namespaceDeclarationSyntax.Name}");
                        output.AppendLine("{");
                        output.IncreaseIndent();

                        GenerateSyntaxNodes(output, namespaceDeclarationSyntax.Members);

                        output.DecreaseIndent();
                        output.AppendLine("}");
                        break;

                    case InterfaceDeclarationSyntax interfaceDeclarationSyntax:
                        GenerateInterface(output, interfaceDeclarationSyntax);
                        break;

                    case UsingDirectiveSyntax usingDirectiveSyntax:
                        output.AppendLine(usingDirectiveSyntax.ToString());
                        break;

                    default:
                        throw new InvalidOperationException(CreateErrorMessage(node, $"{node.Kind()} was not expected."));
                }
            }
        }

        private static void GenerateInterface(OutputBuffer output, InterfaceDeclarationSyntax node)
        {
            if (node.BaseList == null)
                throw new InvalidOperationException(CreateErrorMessage(node, $"Expected interface {node.Identifier} to have base interface."));

            var baseClasses = node.BaseList.ChildNodes();

            if (baseClasses.Count() > 1)
                throw new InvalidOperationException(CreateErrorMessage(node, $"Expected interface {node.Identifier} to have only 1 base interface."));

            var baseClass = ((SimpleBaseTypeSyntax)baseClasses.Single()).ToString();

            switch (baseClass)
            {
                case "JSGlobalObject":
                    GenerateJSObjectWrapper(output, node);
                    break;

                case "JSObjectWrapper":
                    break;

                default:
                    throw new InvalidOperationException(CreateErrorMessage(node, $"Unexpected base interface: {baseClass}"));
            }
        }

        private static void GenerateJSGlobalObject(OutputBuffer output, WasmWranglerBinding binding)
        {
            output.AppendLine("public static partial class JS");
            output.AppendLine("{");
            output.IncreaseIndent();

            output.AppendLine($"public static partial class {binding.Name}");
            output.AppendLine("{");
            output.AppendLine("\tprivate static JSObject? __js;");
            output.AppendLine();
            output.AppendLine("\tprivate static JSObject _js");
            output.AppendLine("\t{");
            output.AppendLine("\t\tget");
            output.AppendLine("\t\t{");
            output.AppendLine("\t\t\tif (__js == null)");
            output.AppendLine($"\t\t\t\t__js = (JSObject)Runtime.GetGlobalObject(nameof({binding.Name}));");
            output.AppendLine();
            output.AppendLine("\t\t\treturn __js;");
            output.AppendLine("\t\t}");
            output.AppendLine("\t}");
            output.AppendLine();

            output.IncreaseIndent();

            foreach (var method in binding.Methods)
                GenerateMethod(output, method);

            output.DecreaseIndent();

            output.AppendLine("}");
            output.DecreaseIndent();

            output.AppendLine("}");
            output.AppendLine();
        }

        private static void GenerateJSObjectWrapper(OutputBuffer output, InterfaceDeclarationSyntax node)
        {
            output.AppendLine($"public partial class {node.Identifier}");
            output.AppendLine("{");
            output.AppendLine("\tprivate readonly JSObject _js;");
            output.AppendLine();
            output.AppendLine($"\tpublic {node.Identifier}(JSObject js)");
            output.AppendLine("\t{");
            output.AppendLine("\t\t_js = js;");
            output.AppendLine("\t}");
            output.AppendLine();
            output.AppendLine($"\tpublic static {node.Identifier}? Wrap(JSObject? js) => js != null ? new {node.Identifier}(js) : null;");
            output.AppendLine();
            output.AppendLine($"\tpublic static implicit operator JSObject({node.Identifier} obj) => obj._js;");
            output.AppendLine();

            output.IncreaseIndent();

            //foreach (var property in binding.Properties)
            //    GenerateProperty(output, property);

            output.DecreaseIndent();
            
            output.AppendLine("}");
            output.AppendLine();
        }

        private static void GenerateProperty(OutputBuffer output, WasmWranglerPropertyBinding property)
        {
            output.AppendLine($"public {property.Type} {property.Name}");
            output.AppendLine("{");
            
            if (property.CanGet)
                output.AppendLine($"\tget => _js.GetObjectProperty<{property.Type}>(nameof({property.Name}));");

            if (property.CanSet)
                output.AppendLine($"\tset => _js.SetObjectProperty(nameof({property.Name}), value);");

            output.AppendLine("}");
        }

        private static void GenerateMethod(OutputBuffer output, WasmWranglerMethodBinding method)
        {
            output.Append($"public static {method.ReturnType} {method.Name}(");

            for (int i = 0; i < method.Args.Length; i++)
            {
                if (i > 0)
                    output.Append(", ");

                if (method.Args[i].Params)
                    output.Append("params ");

                output.Append($"{method.Args[i].Type} {method.Args[i].Name}");
            }

            output.AppendLine(")");
            output.AppendLine("{");

            output.Append("\t");

            if (method.ReturnType != "void")
            {
                if (method.WrapReturn)
                {
                    output.Append($"return {method.ReturnType.TrimEnd('?')}.Wrap((JSObject?)");
                }
                else
                {
                    output.Append($"return ({method.ReturnType})");
                }
            }

            output.Append($"_js.Invoke(nameof({method.Name})");

            for (int i = 0; i < method.Args.Length; i++)
                output.Append($", {method.Args[i].Name}");

            output.Append(")");

            if (method.ReturnType != "void" && method.WrapReturn)
                output.Append(")");

            output.AppendLine(";");
            output.AppendLine("}");

            output.AppendLine();
        }
    }
}
