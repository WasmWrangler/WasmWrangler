using System;
using System.IO;
using System.Text;
using System.Text.Json;

namespace WasmWrangler.BindingGenerator
{
    public static class Program
    {
        public static int Main(string[] args)
        {
            if (args.Length < 1)
            {
                Console.Error.WriteLine("ERROR: Please provide the directory to search for bindings.");
                return 1;
            }

            var rootDirectory = Path.GetFullPath(args[0]);
            Console.WriteLine($"RootDirectory: {rootDirectory}");

            var bindingFiles = Directory.EnumerateFiles(rootDirectory, "*.wwb", SearchOption.AllDirectories);

            foreach (var inputFile in bindingFiles)
            {
                var outputFile = Path.Combine(Path.GetDirectoryName(inputFile)!, Path.GetFileNameWithoutExtension(inputFile) + ".g.cs");

                Console.WriteLine($"{inputFile} => {outputFile}");

                var binding = JsonSerializer.Deserialize<WasmWranglerBinding>(File.ReadAllText(inputFile));

                if (binding == null)
                    return 1;

                var output = new OutputBuffer();

                output.AppendLine("// <auto-generated />");
                output.AppendLine("#nullable enable");
                output.AppendLine("using WebAssembly;");
                output.AppendLine();
                output.AppendLine("namespace WasmWrangler");
                output.AppendLine("{");
                output.IncreaseIndent();

                switch (binding.Type)
                {
                    case "GlobalObject":
                        GenerateGlobalObject(output, binding);
                        break;

                    case "JSObjectWrapper":
                        GenerateJSObjectWrapper(output, binding);
                        break;
                }

                output.DecreaseIndent();
                output.AppendLine("}");

                File.WriteAllText(outputFile, output.ToString());
            }

            return 0;
        }

        private static void GenerateGlobalObject(OutputBuffer output, WasmWranglerBinding binding)
        {
            output.AppendLine("public static partial class JS");
            output.AppendLine("{");
            output.IncreaseIndent();

            output.AppendLine($"public static partial class {binding.Name}");
            output.AppendLine("{");
            output.AppendLine("\tprivate static JSObject? __js;");
            output.AppendLine();
            output.AppendLine("\tprivate static JSObject _js");
            output.AppendLine("\t{");
            output.AppendLine("\t\tget");
            output.AppendLine("\t\t{");
            output.AppendLine("\t\t\tif (__js == null)");
            output.AppendLine($"\t\t\t\t__js = (JSObject)Runtime.GetGlobalObject(nameof({binding.Name}));");
            output.AppendLine();
            output.AppendLine("\t\t\treturn __js;");
            output.AppendLine("\t\t}");
            output.AppendLine("\t}");
            output.AppendLine();

            output.IncreaseIndent();

            foreach (var method in binding.Methods)
                GenerateMethod(output, method);

            output.DecreaseIndent();

            output.AppendLine("}");

            output.DecreaseIndent();
            output.AppendLine("}");
        }

        private static void GenerateJSObjectWrapper(OutputBuffer output, WasmWranglerBinding binding)
        {
            output.AppendLine($"public partial class {binding.Name}");
            output.AppendLine("{");
            output.AppendLine("\tprivate readonly JSObject _js;");
            output.AppendLine();
            output.AppendLine($"\tpublic {binding.Name}(JSObject js)");
            output.AppendLine("\t{");
            output.AppendLine("\t\t_js = js;");
            output.AppendLine("\t}");
            output.AppendLine();
            output.AppendLine($"\tpublic static {binding.Name}? Wrap(JSObject? js) => js != null ? new {binding.Name}(js) : null;");
            output.AppendLine();
            output.AppendLine($"\tpublic static implicit operator JSObject({binding.Name} obj) => obj._js;");
            output.AppendLine();

            output.IncreaseIndent();

            foreach (var property in binding.Properties)
                GenerateProperty(output, property);

            output.DecreaseIndent();

            output.AppendLine("}");
        }

        private static void GenerateProperty(OutputBuffer output, WasmWranglerPropertyBinding property)
        {
            output.AppendLine($"public {property.Type} {property.Name}");
            output.AppendLine("{");
            
            if (property.CanGet)
                output.AppendLine($"\tget => _js.GetObjectProperty<{property.Type}>(nameof({property.Name}));");

            if (property.CanSet)
                output.AppendLine($"\tset => _js.SetObjectProperty(nameof({property.Name}), value);");

            output.AppendLine("}");
        }

        private static void GenerateMethod(OutputBuffer output, WasmWranglerMethodBinding method)
        {
            output.Append($"public static {method.ReturnType} {method.Name}(");

            for (int i = 0; i < method.Args.Length; i++)
            {
                if (i > 0)
                    output.Append(", ");

                if (method.Args[i].Params)
                    output.Append("params ");

                output.Append($"{method.Args[i].Type} {method.Args[i].Name}");
            }

            output.AppendLine(")");
            output.AppendLine("{");

            output.Append("\t");

            if (method.ReturnType != "void")
            {
                if (method.WrapReturn)
                {
                    output.Append($"return {method.ReturnType.TrimEnd('?')}.Wrap((JSObject?)");
                }
                else
                {
                    output.Append($"return ({method.ReturnType})");
                }
            }

            output.Append($"_js.Invoke(nameof({method.Name})");

            for (int i = 0; i < method.Args.Length; i++)
                output.Append($", {method.Args[i].Name}");

            output.Append(")");

            if (method.ReturnType != "void" && method.WrapReturn)
                output.Append(")");

            output.AppendLine(";");
            output.AppendLine("}");

            output.AppendLine();
        }
    }
}
